---
- include: clean_data.yaml
- include: stress_profile.yaml

- name: Run stress
  hosts: "CassandraLoadgen"
  user: "{{loader_login}}"
  vars:
    iteration: 0 # overload me
    server: "Scylla"
  tasks:
    - set_fact: loader_ip="{{ansible_eth0.ipv4.address}}"

    - name: Gather facts
      action: ec2_facts

    - set_fact:
        region_group: "{{ ec2_region | regex_replace('-','_') }}"
        user_group: "tag_user_{{setup_name}}"

    - debug: msg="{{ hostvars[item].ec2_private_ip_address }}"
      with_items: groups.DB | intersect (groups.{{region_group}}) | intersect (groups.{{user_group}}) | intersect (groups.{{server}}) | difference(groups.Stopped)
      register: output

    - set_fact: ip_list={{ output.results|map(attribute='msg') | join(',') }}

    - debug: msg="ip_list is {{ip_list}}"

    - set_fact: taskset="taskset -c {{load_cpus}}"
      when: load_cpus is defined

    - set_fact: taskset=""
      when: load_cpus is not defined

    - debug: msg="setting network IRQ affinity to CPU0"
      when: load_cpus is defined

    - shell: for irq in `cat  /proc/interrupts | grep eth0 | cut -d":" -f1`; do echo 1 > /proc/irq/$irq/smp_affinity; done
      when: load_cpus is defined
      sudo: yes

    - set_fact: log_file="{{remote_path}}{{output_file}}.{{ec2_region}}.{{loader_ip}}"

    - name: run cassandra-stress withe one insert to create the table
      shell: cassandra-stress write n=1 no-warmup -node {{ip_list}} -rate threads=1  {{stress_options}}
      run_once: true

    - shell: sleep {{sleep_between_runs}}; {{taskset}} cassandra-stress {{command}} no-warmup {{command_options}} -node {{ip_list}} -rate threads={{threads}} -log file={{log_file}}.{{iteration}}.data {{stress_options}}
      when: profile_file is undefined
      ignore_errors: True

    - shell: sleep {{sleep_between_runs}}; {{taskset}} cassandra-stress user profile={{profile_file}} no-warmup {{command_options}} -node {{ip_list}} -rate threads={{threads}} -log file={{log_file}}.{{iteration}}.data {{stress_options}}
      when: profile_file is defined
      ignore_errors: True

    - fetch: src={{log_file}}.{{iteration}}.data dest={{home_path}}{{output_file}}.{{ec2_region}}.{{loader_ip}}.{{iteration}}.data flat=yes
      ignore_errors: True

    - local_action: s3 bucket={{s3_buckt}} object={{output_file}}/{{output_file}}.{{ec2_region}}.{{loader_ip}}.{{iteration}} src={{home_path}}{{output_file}}.{{loader_ip}}.{{iteration}} mode=put
      when: upload_to_s3
